#!/bin/zsh

echo "       _     _ _            "
echo "      | |   (_) |           "
echo "  _ __| |__  _| |_ __  _ __ "
echo " | '__| '_ \| | | '_ \| '__|"
echo " | |  | |_) | | | |_) | |   "
echo " |_|  |_.__/|_|_| .__/|_|   "
echo "                | |         "
echo "                |_|         "
echo ""
echo ""

set -o errexit -o pipefail -o noclobber -o nounset

! getopt --test > /dev/null
if [[ ${pipestatus[1]} -ne 4 ]]; then
    echo 'I`m sorry, `getopt --test` failed in this environment.'
    exit 1
fi

# options
LONGOPTS=single-sided,help,number:,banner
OPTIONS=shn:b

! PARSED=$(getopt --options=$OPTIONS --longoptions=$LONGOPTS --name "$0" -- "$@")
if [[ ${pipestatus[1]} -ne 0 ]]; then
    exit 2
fi

eval set -- "$PARSED"

s=n h=n number=1 b=n

while true; do
    case "$1" in
        -s|--single-sided)
            s=y
            shift
            ;;
        -n|--number)
            number="$2"
            shift 2
            ;;
        -b|--banner)
            b=y
            shift
            ;;
        -h|--help)
            h=y
            shift
            ;;
        --)
            shift
            break
            ;;
        *)
            echo "Error while parsing options."
            exit 3
            ;;
    esac
done

if [[ $h == "y" ]]; then
    echo "Usage: remotelpr [OPTION]... FILE..."
    echo "Copy FILE(s) to a remote server and print it."
    echo ""
    echo "Options:"
    echo "  -s, --single-sided  print single-sided"
    echo "  -n, --number        specify the number of copies"
    echo "  -b, --banner        print a banner page"
    echo "  -h, --help          display this help and exit"
    exit 0
fi

if [[ $# -eq 0 ]]; then
    echo "Please provide at least one file."
    exit 1
fi

# list of servers
servers=("adrastos" "admeta" "aither" "alkmene" "amata" "apate" "ajax" "agylla" "arges" "anaxo" "ares" "atropos" "achilles" "adamas" "alethia" "axylos" "arabia" "acheloos" "aktor" "adanis" "anemoi" "elektra" "eleusius" "eryx" "erebos" "eumolos" "eos" "euros" "eros" "kademos" "kalypso" "kalliste" "kratos" "kreon" "klytios" "kroton" "oikles" "oibalos" "otos" "oidipus" "oxylos" "orestes" "proteus" "priamos" "phoenix" "phobos" "phylla" "pythia" "pandion" "phoebe" "polydora" "polyphem" "penelope" "pegasos" "paris" "pan" "pallas")

# file(s) to copy
files_to_copy=("$@")

# command which should be executed after copying the file(s)
post_copy_command="/bin/bash --norc remotelpr"
# add the single-sided option to the post copy command
if [[ $s == "y" ]]; then
    post_copy_command="$post_copy_command -s"
fi
post_copy_command="$post_copy_command -n $number"
if [[ $b == "y" ]]; then
    post_copy_command="$post_copy_command -b"
fi

post_copy_command="$post_copy_command ${files_to_copy[@]}"

# iterate over the servers
for server in "${servers[@]}"; do
    # try to copy the file(s) to the current server
    scp "${files_to_copy[@]}" "$server:" && \
    # if the copy was successful, execute the post copy command
    ssh -q "$server" "$post_copy_command" && \
    break
done

echo "Done!"
exit 0

# try to copy the file(s) to the current server
    scp "${files_to_copy[@]}" "$server:" && \
    # if the copy was successful, execute the post copy command
    ssh -q "$server" "$post_copy_command" && \
